import asyncio
import sqlite3
from datetime import datetime

import requests

from config import BOT_TOKEN, weather_token
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command, CommandObject
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
from aiogram import F, Router

router = Router()

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
star = []
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
clava = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É'), KeyboardButton(text='Help')],
    [KeyboardButton(text='–ü–æ–≥–æ–¥–∞ –≤ –ª—é–±–∏–º–æ–º –≥–æ—Ä–æ–¥–µ'), KeyboardButton(text='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥')],
], resize_keyboard=True, input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É')
logger = logging.getLogger(__name__)
count = 0


@dp.message(Command('start'))
async def start(message: Message):
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}, —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É?', reply_markup=clava)


@dp.message(F.text == '–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É')
async def weather(message: Message):
    await message.answer('–•–æ—Ä–æ—à–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "/w <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>"')


@dp.message(F.text == 'Help')
async def help(message: Message):
    await message.answer(f'–ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã)')


@dp.message(F.text == '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥')
async def lsv_country(message: Message):
    await message.answer(f'–•–æ—Ä–æ—à–æ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "/nc <–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞>')


@dp.message(F.text == '–ü–æ–≥–æ–¥–∞ –≤ –ª—é–±–∏–º–æ–º –≥–æ—Ä–æ–¥–µ')
async def lv_country(message: Message):
    smiles = {
        'Clear': '–Ø—Å–Ω–æ \U00002600',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \U00002601',
        'Rain': '–î–æ–∂–¥—å \U00002614',
        'Drizzle': '–î–æ–∂–¥—å \U00002614',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ \U000026A1',
        'Snow': '–°–Ω–µ–≥ \U0001F328',
        'Mist': '–¢—É–º–∞–Ω \U0001F32B',
    }
    flag = True
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    cursor.execute('SELECT * FROM login_id')
    users = cursor.fetchall()
    for i in users:
        if i[0] == message.from_user.id:
            re = requests.get(
                f"https://api.openweathermap.org/data/2.5/weather?q={i[1]}&appid={weather_token}&units=metric"
            )
            data = re.json()
            real_temp = round(data['main']['temp'])
            feel_temp = round(data['main']['feels_like'])
            now_time = str(datetime.now())[:19]
            country = data['sys']['country']
            sunrise = (str(datetime.fromtimestamp(data['sys']['sunrise'])))[11:]
            sunset = (str(datetime.fromtimestamp(data['sys']['sunset'])))[11:]
            wind = data['wind']['speed']
            if real_temp > 0:
                real_temp = f'+{real_temp}'
            if feel_temp > 0:
                feel_temp = f'+{feel_temp}'
            main_weather = data['weather'][0]['main']
            if main_weather in smiles:
                wsmile = smiles[main_weather]
            else:
                wsmile = '–ù–∏–ø–æ–Ω'
            await message.answer(f"***{now_time}*** \n"
                                 f"–ì–æ—Ä–æ–¥:{i[1]} –°—Ç—Ä–∞–Ω–∞:{country} \n"
                                 f"–ü–æ–≥–æ–¥–∞: {wsmile} \n"
                                 f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {real_temp}¬∞–° \n"
                                 f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feel_temp}¬∞–° \n"
                                 f"–í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: {sunrise} –ú–°–ö\n"
                                 f"–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {sunset} –ú–°–ö\n"
                                 f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c \n"
                                 f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ü•∞"
                                 )
            flag = False
    if flag:
        await message.answer('–¢—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–≤–æ–π –ª—é–±–∏–º—ã–π –≥–æ—Ä–æ–¥!')


@dp.message(Command('nc'))
async def love_country(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    if len(command.args.split()):
        name_love_country = ' '.join(command.args.split())
    if len(command.args.split()) > 1:
        name_love_country = ' '.join(command.args.split())

    connect = sqlite3.connect('users.db')
    cursor = connect.cursor()

    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
            id INTEGER, gorod TEXT
    )""")
    connect.commit()
    cursor.execute(f"SELECT id FROM login_id WHERE id = {message.from_user.id}")
    data = cursor.fetchone()
    if data is None:
        cursor.execute("INSERT INTO login_id VALUES(?, ?);", [message.from_user.id, name_love_country])
        connect.commit()
    else:
        cursor.execute(f"DELETE FROM login_id WHERE id = {message.from_user.id}")
        cursor.execute("INSERT INTO login_id VALUES(?, ?);", [message.from_user.id, name_love_country])
        connect.commit()
    await message.answer('–£—Å–ø–µ—à–Ω–æ!')


@dp.message(Command('w'))
async def tr(message: Message, command: CommandObject):
    if command.args is None:
        await message.answer(
            "–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã"
        )
        return
    if len(command.args.split()):
        name_country = ''.join(command.args.split())
    if len(command.args.split()) > 1:
        name_country = ' '.join(command.args.split())
    smiles = {
        'Clear': '–Ø—Å–Ω–æ \U00002600',
        'Clouds': '–û–±–ª–∞—á–Ω–æ \U00002601',
        'Rain': '–î–æ–∂–¥—å \U00002614',
        'Drizzle': '–î–æ–∂–¥—å \U00002614',
        'Thunderstorm': '–ì—Ä–æ–∑–∞ \U000026A1',
        'Snow': '–°–Ω–µ–≥ \U0001F328',
        'Mist': '–¢—É–º–∞–Ω \U0001F32B',
    }
    try:
        re = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={name_country}&appid={weather_token}&units=metric"
        )
        data = re.json()
        real_temp = round(data['main']['temp'])
        feel_temp = round(data['main']['feels_like'])
        now_time = str(datetime.now())[:19]
        country = data['sys']['country']
        sunrise = (str(datetime.fromtimestamp(data['sys']['sunrise'])))[11:]
        sunset = (str(datetime.fromtimestamp(data['sys']['sunset'])))[11:]
        wind = data['wind']['speed']
        if real_temp > 0:
            real_temp = f'+{real_temp}'
        if feel_temp > 0:
            feel_temp = f'+{feel_temp}'
        main_weather = data['weather'][0]['main']
        if main_weather in smiles:
            wsmile = smiles[main_weather]
        else:
            wsmile = '–ù–∏–ø–æ–Ω'
        await message.answer(f"***{now_time}*** \n"
                             f"–ì–æ—Ä–æ–¥:{name_country} –°—Ç—Ä–∞–Ω–∞:{country} \n"
                             f"–ü–æ–≥–æ–¥–∞: {wsmile} \n"
                             f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {real_temp}¬∞–° \n"
                             f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feel_temp}¬∞–° \n"
                             f"–í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: {sunrise} –ú–°–ö\n"
                             f"–í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: {sunset} –ú–°–ö \n"
                             f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind} –º/c \n"
                             f"–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! ü•∞"
                             )
    except:
        await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥')


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
